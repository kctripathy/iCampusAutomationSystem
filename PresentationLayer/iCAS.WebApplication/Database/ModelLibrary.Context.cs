//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TCon.iCAS.WebApplication.Database
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class iCAS_LibraryEntity : DbContext
    {
        public iCAS_LibraryEntity()
            : base("name=iCAS_LibraryEntity")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Account_Years> Account_Years { get; set; }
        public virtual DbSet<Accounts_Master> Accounts_Master { get; set; }
        public virtual DbSet<Accounts_Transactions> Accounts_Transactions { get; set; }
        public virtual DbSet<ADMN_MST_Calendar> ADMN_MST_Calendar { get; set; }
        public virtual DbSet<ADMN_MST_CommonKeys> ADMN_MST_CommonKeys { get; set; }
        public virtual DbSet<ADMN_MST_Countries> ADMN_MST_Countries { get; set; }
        public virtual DbSet<ADMN_MST_Districts> ADMN_MST_Districts { get; set; }
        public virtual DbSet<ADMN_MST_Modules> ADMN_MST_Modules { get; set; }
        public virtual DbSet<ADMN_MST_Permissions> ADMN_MST_Permissions { get; set; }
        public virtual DbSet<ADMN_MST_Roles> ADMN_MST_Roles { get; set; }
        public virtual DbSet<ADMN_MST_States> ADMN_MST_States { get; set; }
        public virtual DbSet<ADMN_MST_UserRolePermissionExceptions> ADMN_MST_UserRolePermissionExceptions { get; set; }
        public virtual DbSet<ADMN_MST_Users> ADMN_MST_Users { get; set; }
        public virtual DbSet<HRMS_MST_Employees> HRMS_MST_Employees { get; set; }
        public virtual DbSet<iCAS_Students> iCAS_Students { get; set; }
        public virtual DbSet<Accounts_Balance> Accounts_Balance { get; set; }
        public virtual DbSet<Accounts_BookClose> Accounts_BookClose { get; set; }
        public virtual DbSet<Accounts_Group> Accounts_Group { get; set; }
        public virtual DbSet<Accounts_MonthlyProcess> Accounts_MonthlyProcess { get; set; }
        public virtual DbSet<Accounts_NumberControl> Accounts_NumberControl { get; set; }
        public virtual DbSet<Accounts_TranVouchers> Accounts_TranVouchers { get; set; }
        public virtual DbSet<ADMN_MST_BankBranches> ADMN_MST_BankBranches { get; set; }
        public virtual DbSet<ADMN_MST_Banks> ADMN_MST_Banks { get; set; }
        public virtual DbSet<ADMN_MST_Companies> ADMN_MST_Companies { get; set; }
        public virtual DbSet<ADMN_MST_Currency> ADMN_MST_Currency { get; set; }
        public virtual DbSet<ADMN_MST_Forms> ADMN_MST_Forms { get; set; }
        public virtual DbSet<ADMN_MST_Guests> ADMN_MST_Guests { get; set; }
        public virtual DbSet<ADMN_MST_MasterCodes> ADMN_MST_MasterCodes { get; set; }
        public virtual DbSet<ADMN_MST_MasterCodes_Officewise> ADMN_MST_MasterCodes_Officewise { get; set; }
        public virtual DbSet<ADMN_MST_MenuItemsWeb> ADMN_MST_MenuItemsWeb { get; set; }
        public virtual DbSet<ADMN_MST_OfficeGroups> ADMN_MST_OfficeGroups { get; set; }
        public virtual DbSet<ADMN_MST_Offices> ADMN_MST_Offices { get; set; }
        public virtual DbSet<ADMN_MST_Reports> ADMN_MST_Reports { get; set; }
        public virtual DbSet<ADMN_MST_RolePermissions_Web> ADMN_MST_RolePermissions_Web { get; set; }
        public virtual DbSet<ADMN_MST_SettingKeys> ADMN_MST_SettingKeys { get; set; }
        public virtual DbSet<ADMN_MST_Settings> ADMN_MST_Settings { get; set; }
        public virtual DbSet<ADMN_MST_Settings_Officewise> ADMN_MST_Settings_Officewise { get; set; }
        public virtual DbSet<ADMN_MST_Users_Companywise> ADMN_MST_Users_Companywise { get; set; }
        public virtual DbSet<ADMN_MST_Users_Incharge> ADMN_MST_Users_Incharge { get; set; }
        public virtual DbSet<ADMN_MST_Users_Log> ADMN_MST_Users_Log { get; set; }
        public virtual DbSet<ADMN_MST_Users_Officewise> ADMN_MST_Users_Officewise { get; set; }
        public virtual DbSet<ADMN_MST_UserSettingKeys> ADMN_MST_UserSettingKeys { get; set; }
        public virtual DbSet<ADMN_MST_UserSettings> ADMN_MST_UserSettings { get; set; }
        public virtual DbSet<ADMN_MST_WebForms> ADMN_MST_WebForms { get; set; }
        public virtual DbSet<ADMN_TRN_ErrorLog> ADMN_TRN_ErrorLog { get; set; }
        public virtual DbSet<BankBranch> BankBranches { get; set; }
        public virtual DbSet<Bank> Banks { get; set; }
        public virtual DbSet<HRMS_MST_Departments> HRMS_MST_Departments { get; set; }
        public virtual DbSet<HRMS_MST_Designations> HRMS_MST_Designations { get; set; }
        public virtual DbSet<LIB_Master_Books> LIB_Master_Books { get; set; }
        public virtual DbSet<LIB_MasterAuthors> LIB_MasterAuthors { get; set; }
        public virtual DbSet<LIB_MasterCategories> LIB_MasterCategories { get; set; }
        public virtual DbSet<LIB_MasterPublishers> LIB_MasterPublishers { get; set; }
        public virtual DbSet<LIB_Transactions> LIB_Transactions { get; set; }
    
        public virtual ObjectResult<LIB_Book_Insert_Result> LIB_Book_Insert(Nullable<int> accessionNo, string bookType, Nullable<byte> segmentCode, string classNo, Nullable<int> authorID, string authorName, string title, string edition, Nullable<short> bookYear, string volumeNo, Nullable<int> pages, Nullable<int> publisherID, string publisherName, Nullable<int> supplierID, string supplierName, Nullable<decimal> bookPrice, string billNo, Nullable<System.DateTime> billDate, Nullable<int> category, string remarks, Nullable<bool> issued, string iBNNo, Nullable<System.DateTime> aCCDate, Nullable<int> addedBy, Nullable<System.DateTime> addedDated, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate, string vC_Field1, Nullable<int> nu_Field1, Nullable<System.DateTime> dt_Field1, Nullable<bool> yN_Field1, string book_ImageURL_Small, string book_ImageURL_Medium, string book_Image_URL_Big, string book_PDF_URL, Nullable<bool> isDeleted, Nullable<bool> isActive, Nullable<bool> isIssued, Nullable<int> issued2UserID, ObjectParameter returnValue)
        {
            var accessionNoParameter = accessionNo.HasValue ?
                new ObjectParameter("AccessionNo", accessionNo) :
                new ObjectParameter("AccessionNo", typeof(int));
    
            var bookTypeParameter = bookType != null ?
                new ObjectParameter("BookType", bookType) :
                new ObjectParameter("BookType", typeof(string));
    
            var segmentCodeParameter = segmentCode.HasValue ?
                new ObjectParameter("SegmentCode", segmentCode) :
                new ObjectParameter("SegmentCode", typeof(byte));
    
            var classNoParameter = classNo != null ?
                new ObjectParameter("ClassNo", classNo) :
                new ObjectParameter("ClassNo", typeof(string));
    
            var authorIDParameter = authorID.HasValue ?
                new ObjectParameter("AuthorID", authorID) :
                new ObjectParameter("AuthorID", typeof(int));
    
            var authorNameParameter = authorName != null ?
                new ObjectParameter("AuthorName", authorName) :
                new ObjectParameter("AuthorName", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var editionParameter = edition != null ?
                new ObjectParameter("Edition", edition) :
                new ObjectParameter("Edition", typeof(string));
    
            var bookYearParameter = bookYear.HasValue ?
                new ObjectParameter("bookYear", bookYear) :
                new ObjectParameter("bookYear", typeof(short));
    
            var volumeNoParameter = volumeNo != null ?
                new ObjectParameter("VolumeNo", volumeNo) :
                new ObjectParameter("VolumeNo", typeof(string));
    
            var pagesParameter = pages.HasValue ?
                new ObjectParameter("Pages", pages) :
                new ObjectParameter("Pages", typeof(int));
    
            var publisherIDParameter = publisherID.HasValue ?
                new ObjectParameter("PublisherID", publisherID) :
                new ObjectParameter("PublisherID", typeof(int));
    
            var publisherNameParameter = publisherName != null ?
                new ObjectParameter("PublisherName", publisherName) :
                new ObjectParameter("PublisherName", typeof(string));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var supplierNameParameter = supplierName != null ?
                new ObjectParameter("SupplierName", supplierName) :
                new ObjectParameter("SupplierName", typeof(string));
    
            var bookPriceParameter = bookPrice.HasValue ?
                new ObjectParameter("BookPrice", bookPrice) :
                new ObjectParameter("BookPrice", typeof(decimal));
    
            var billNoParameter = billNo != null ?
                new ObjectParameter("billNo", billNo) :
                new ObjectParameter("billNo", typeof(string));
    
            var billDateParameter = billDate.HasValue ?
                new ObjectParameter("billDate", billDate) :
                new ObjectParameter("billDate", typeof(System.DateTime));
    
            var categoryParameter = category.HasValue ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("remarks", remarks) :
                new ObjectParameter("remarks", typeof(string));
    
            var issuedParameter = issued.HasValue ?
                new ObjectParameter("Issued", issued) :
                new ObjectParameter("Issued", typeof(bool));
    
            var iBNNoParameter = iBNNo != null ?
                new ObjectParameter("IBNNo", iBNNo) :
                new ObjectParameter("IBNNo", typeof(string));
    
            var aCCDateParameter = aCCDate.HasValue ?
                new ObjectParameter("ACCDate", aCCDate) :
                new ObjectParameter("ACCDate", typeof(System.DateTime));
    
            var addedByParameter = addedBy.HasValue ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(int));
    
            var addedDatedParameter = addedDated.HasValue ?
                new ObjectParameter("AddedDated", addedDated) :
                new ObjectParameter("AddedDated", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var vC_Field1Parameter = vC_Field1 != null ?
                new ObjectParameter("VC_Field1", vC_Field1) :
                new ObjectParameter("VC_Field1", typeof(string));
    
            var nu_Field1Parameter = nu_Field1.HasValue ?
                new ObjectParameter("Nu_Field1", nu_Field1) :
                new ObjectParameter("Nu_Field1", typeof(int));
    
            var dt_Field1Parameter = dt_Field1.HasValue ?
                new ObjectParameter("Dt_Field1", dt_Field1) :
                new ObjectParameter("Dt_Field1", typeof(System.DateTime));
    
            var yN_Field1Parameter = yN_Field1.HasValue ?
                new ObjectParameter("YN_Field1", yN_Field1) :
                new ObjectParameter("YN_Field1", typeof(bool));
    
            var book_ImageURL_SmallParameter = book_ImageURL_Small != null ?
                new ObjectParameter("Book_ImageURL_Small", book_ImageURL_Small) :
                new ObjectParameter("Book_ImageURL_Small", typeof(string));
    
            var book_ImageURL_MediumParameter = book_ImageURL_Medium != null ?
                new ObjectParameter("Book_ImageURL_Medium", book_ImageURL_Medium) :
                new ObjectParameter("Book_ImageURL_Medium", typeof(string));
    
            var book_Image_URL_BigParameter = book_Image_URL_Big != null ?
                new ObjectParameter("Book_Image_URL_Big", book_Image_URL_Big) :
                new ObjectParameter("Book_Image_URL_Big", typeof(string));
    
            var book_PDF_URLParameter = book_PDF_URL != null ?
                new ObjectParameter("Book_PDF_URL", book_PDF_URL) :
                new ObjectParameter("Book_PDF_URL", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isIssuedParameter = isIssued.HasValue ?
                new ObjectParameter("IsIssued", isIssued) :
                new ObjectParameter("IsIssued", typeof(bool));
    
            var issued2UserIDParameter = issued2UserID.HasValue ?
                new ObjectParameter("Issued2UserID", issued2UserID) :
                new ObjectParameter("Issued2UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LIB_Book_Insert_Result>("LIB_Book_Insert", accessionNoParameter, bookTypeParameter, segmentCodeParameter, classNoParameter, authorIDParameter, authorNameParameter, titleParameter, editionParameter, bookYearParameter, volumeNoParameter, pagesParameter, publisherIDParameter, publisherNameParameter, supplierIDParameter, supplierNameParameter, bookPriceParameter, billNoParameter, billDateParameter, categoryParameter, remarksParameter, issuedParameter, iBNNoParameter, aCCDateParameter, addedByParameter, addedDatedParameter, modifiedByParameter, modifiedDateParameter, vC_Field1Parameter, nu_Field1Parameter, dt_Field1Parameter, yN_Field1Parameter, book_ImageURL_SmallParameter, book_ImageURL_MediumParameter, book_Image_URL_BigParameter, book_PDF_URLParameter, isDeletedParameter, isActiveParameter, isIssuedParameter, issued2UserIDParameter, returnValue);
        }
    
        public virtual ObjectResult<LIB_Books_SelectAll_Result> LIB_Books_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LIB_Books_SelectAll_Result>("LIB_Books_SelectAll");
        }
    
        public virtual ObjectResult<LIB_Books_SelectAllByAuthor_Result> LIB_Books_SelectAllByAuthor(string aUTH_NAME)
        {
            var aUTH_NAMEParameter = aUTH_NAME != null ?
                new ObjectParameter("AUTH_NAME", aUTH_NAME) :
                new ObjectParameter("AUTH_NAME", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LIB_Books_SelectAllByAuthor_Result>("LIB_Books_SelectAllByAuthor", aUTH_NAMEParameter);
        }
    
        public virtual ObjectResult<LIB_Books_SelectAllByAuthorID_Result> LIB_Books_SelectAllByAuthorID(Nullable<int> aUTH_ID)
        {
            var aUTH_IDParameter = aUTH_ID.HasValue ?
                new ObjectParameter("AUTH_ID", aUTH_ID) :
                new ObjectParameter("AUTH_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LIB_Books_SelectAllByAuthorID_Result>("LIB_Books_SelectAllByAuthorID", aUTH_IDParameter);
        }
    
        public virtual ObjectResult<LIB_Books_SelectAllByCategory_Result> LIB_Books_SelectAllByCategory(string cATEGORY_NAME)
        {
            var cATEGORY_NAMEParameter = cATEGORY_NAME != null ?
                new ObjectParameter("CATEGORY_NAME", cATEGORY_NAME) :
                new ObjectParameter("CATEGORY_NAME", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LIB_Books_SelectAllByCategory_Result>("LIB_Books_SelectAllByCategory", cATEGORY_NAMEParameter);
        }
    
        public virtual ObjectResult<LIB_Books_SelectAllByID_Result> LIB_Books_SelectAllByID(Nullable<int> bookID)
        {
            var bookIDParameter = bookID.HasValue ?
                new ObjectParameter("BookID", bookID) :
                new ObjectParameter("BookID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LIB_Books_SelectAllByID_Result>("LIB_Books_SelectAllByID", bookIDParameter);
        }
    
        public virtual int LIB_Books_SelectAllByPublisher(string pUBL_NAME)
        {
            var pUBL_NAMEParameter = pUBL_NAME != null ?
                new ObjectParameter("PUBL_NAME", pUBL_NAME) :
                new ObjectParameter("PUBL_NAME", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LIB_Books_SelectAllByPublisher", pUBL_NAMEParameter);
        }
    
        public virtual int LIB_Books_SelectAllBySupplier(string pUBL_NAME)
        {
            var pUBL_NAMEParameter = pUBL_NAME != null ?
                new ObjectParameter("PUBL_NAME", pUBL_NAME) :
                new ObjectParameter("PUBL_NAME", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LIB_Books_SelectAllBySupplier", pUBL_NAMEParameter);
        }
    
        public virtual ObjectResult<string> LIB_BookTypes_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("LIB_BookTypes_SelectAll");
        }
    
        public virtual ObjectResult<LIB_Categories_SelectAll_Result> LIB_Categories_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LIB_Categories_SelectAll_Result>("LIB_Categories_SelectAll");
        }
    }
}
